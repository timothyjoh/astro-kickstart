---
import '@/styles/globals.css'
import '@fontsource/nebula-sans';
import '@fontsource-variable/lora';
import '@fontsource/kalam';
import '@fontsource-variable/fira-code';
import '@fontsource-variable/comfortaa';
import '@fontsource-variable/lexend';
import ThemePickerDropdown from '@/components/ThemePickerDropdown'
import { DEFAULT_THEME, getAvailableThemes, THEME_STORAGE_KEY } from '@/lib/theme'

export interface Props {
  title: string;
  description?: string;
  date?: string;
  tags?: string[];
  author?: string;
}

const { title, description, date, tags, author = "Your Name" } = Astro.props;
const availableThemes = getAvailableThemes()
const defaultTheme = DEFAULT_THEME
const storageKey = THEME_STORAGE_KEY
---

<!doctype html>
<html lang="en" data-theme={defaultTheme}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    {description && <meta name="description" content={description} />}
    <script is:inline define:vars={{ storageKey, defaultTheme }}>
      try {
        const stored = window.localStorage.getItem(storageKey)
        document.documentElement.dataset.theme = stored || defaultTheme
      } catch (error) {
        document.documentElement.dataset.theme = defaultTheme
      }
    </script>
  </head>
  <body class="bg-base-200">
    <!-- Navigation -->
    <nav class="bg-base-100 border-b border-base-300 sticky top-0 z-10">
      <div class="max-w-7xl mx-auto px-6 py-4">
        <div class="flex justify-between items-center">
          <a href="/blog" class="font-serif text-xl font-bold transition-colors">
            Demonstration Blog
          </a>
          <div class="flex items-center gap-4">
            <div class="flex gap-6">
              <a href="/" class="font-sans text-sm transition-colors">Home</a>
              <a href="/blog" class="font-sans text-sm transition-colors">Blog</a>
            </div>
            <ThemePickerDropdown
              client:load
              themes={availableThemes}
              defaultTheme={defaultTheme}
              storageKey={storageKey}
            />
          </div>
        </div>
      </div>
    </nav>

    <div class="max-w-7xl mx-auto px-6 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-12 gap-8">
        <!-- Left Aside Area -->
        <aside class="lg:col-span-3 order-2 lg:order-1">
          <div class="top-24 space-y-6">
            <!-- Post Meta -->
            <div class="bg-base-100 rounded-lg p-4 shadow-sm border border-base-300">
              <h3 class="font-title text-sm font-semibold mb-3">Post Details</h3>
              {date && (
                <div class="text-xs mb-2 font-sans">
                  <span class="font-medium">Published:</span><br />
                  {new Date(date).toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </div>
              )}
              <div class="text-xs mb-2 font-sans">
                <span class="font-medium">Author:</span><br />
                {author}
              </div>
              {tags && tags.length > 0 && (
                <div class="text-xs font-sans">
                  <span class="font-medium">Tags:</span><br />
                  <div class="flex flex-wrap gap-1 mt-1">
                    {tags.map(tag => (
                      <span class="bg-base-200 px-2 py-1 rounded text-xs">
                        #{tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <!-- Table of Contents Placeholder -->
            <div class="bg-base-100 rounded-lg p-4 shadow-sm border border-base-300">
              <h3 class="font-title text-sm font-semibold mb-3">Contents</h3>
              <div id="toc" class="text-xs font-sans space-y-1">
                <!-- TOC will be populated by JavaScript -->
              </div>
            </div>

            <!-- Reading Progress - Remove from sidebar -->
            <!-- <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
              <h3 class="font-title text-sm font-semibold text-gray-900 mb-3">Reading Progress</h3>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div id="reading-progress" class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
              </div>
            </div> -->
          </div>
        </aside>

        <!-- Main Content Area -->
        <main class="lg:col-span-6 lg:col-start-5 order-1 lg:order-2">
          <article class="p-8">
            <!-- Article Header -->
            <header class="mb-8 pb-6 border-b border-base-300">
              <h1 class="font-title text-3xl lg:text-4xl font-bold mb-4 leading-tight">
                {title}
              </h1>
              {description && (
                <p class="font-sans text-lg leading-relaxed">
                  {description}
                </p>
              )}
              <div class="flex items-center gap-4 mt-4 text-sm font-sans">
                <span>{author}</span>
                {date && (
                  <>
                    <span>â€¢</span>
                    <time datetime={date}>
                      {new Date(date).toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                      })}
                    </time>
                  </>
                )}
              </div>
            </header>

            <!-- Article Content -->
            <div class="prose prose-lg max-w-none">
              <slot />
            </div>
          </article>
        </main>

        <!-- Right Area (empty for now, could be used for related posts, ads, etc.) -->
        <div class="lg:col-span-3 order-3 hidden lg:block">
          <!-- Reserved for future use -->
        </div>
      </div>
    </div>

    <!-- Floating Reading Progress Footer -->
    <footer class="fixed bottom-0 left-0 right-0 bg-base-100/90 backdrop-blur-sm border-t border-base-300 px-6 py-3 z-20">
      <div class="max-w-7xl mx-auto flex items-center justify-between">
        <span class="text-sm font-sans">Reading Progress</span>
        <div class="flex-1 mx-4 bg-base-300 rounded-full h-2">
          <div id="reading-progress" class="bg-primary h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
        <span class="text-sm font-sans" id="progress-text">0%</span>
      </div>
    </footer>

    <!-- Scripts -->
    <script>
      // Table of Contents Generator
      function generateTOC() {
        const toc = document.getElementById('toc');
        const headings = document.querySelectorAll('article h2, article h3, article h4');
        
        if (headings.length === 0) {
          toc.innerHTML = '<span class="text-gray-400">No headings found</span>';
          return;
        }

        let tocHTML = '';
        headings.forEach((heading, index) => {
          const id = `heading-${index}`;
          heading.id = id;
          
          const level = parseInt(heading.tagName[1]);
          const indent = level === 2 ? '' : level === 3 ? 'ml-3' : 'ml-6';
          
          tocHTML += `<a href="#${id}" class="block hover:text-gray-900 transition-colors ${indent}">${heading.textContent}</a>`;
        });
        
        toc.innerHTML = tocHTML;
      }

      // Reading Progress
      function updateReadingProgress() {
        const article = document.querySelector('article');
        const scrollTop = window.scrollY;
        const docHeight = article.offsetHeight;
        const winHeight = window.innerHeight;
        const scrollPercent = (scrollTop / (docHeight - winHeight)) * 100;
        const clampedPercent = Math.min(Math.max(scrollPercent, 0), 100);
        
        const progressBar = document.getElementById('reading-progress');
        const progressText = document.getElementById('progress-text');
        progressBar.style.width = clampedPercent + '%';
        progressText.textContent = Math.round(clampedPercent) + '%';
      }

      // Initialize on page load
      document.addEventListener('DOMContentLoaded', () => {
        generateTOC();
        updateReadingProgress();
        
        // Update progress on scroll
        window.addEventListener('scroll', updateReadingProgress);
      });
    </script>
  </body>
</html>
